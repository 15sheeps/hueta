// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: combined_proto.proto

package voxieproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Playing_ProcessRequest_FullMethodName      = "/Voxel.Playing/ProcessRequest"
	Playing_ProcessNotification_FullMethodName = "/Voxel.Playing/ProcessNotification"
)

// PlayingClient is the client API for Playing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayingClient interface {
	ProcessRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ProcessNotification(ctx context.Context, in *NotificationSubscribeRequest, opts ...grpc.CallOption) (Playing_ProcessNotificationClient, error)
}

type playingClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayingClient(cc grpc.ClientConnInterface) PlayingClient {
	return &playingClient{cc}
}

func (c *playingClient) ProcessRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Playing_ProcessRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playingClient) ProcessNotification(ctx context.Context, in *NotificationSubscribeRequest, opts ...grpc.CallOption) (Playing_ProcessNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Playing_ServiceDesc.Streams[0], Playing_ProcessNotification_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &playingProcessNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Playing_ProcessNotificationClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type playingProcessNotificationClient struct {
	grpc.ClientStream
}

func (x *playingProcessNotificationClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlayingServer is the server API for Playing service.
// All implementations must embed UnimplementedPlayingServer
// for forward compatibility
type PlayingServer interface {
	ProcessRequest(context.Context, *Request) (*Response, error)
	ProcessNotification(*NotificationSubscribeRequest, Playing_ProcessNotificationServer) error
	mustEmbedUnimplementedPlayingServer()
}

// UnimplementedPlayingServer must be embedded to have forward compatible implementations.
type UnimplementedPlayingServer struct {
}

func (UnimplementedPlayingServer) ProcessRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRequest not implemented")
}
func (UnimplementedPlayingServer) ProcessNotification(*NotificationSubscribeRequest, Playing_ProcessNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessNotification not implemented")
}
func (UnimplementedPlayingServer) mustEmbedUnimplementedPlayingServer() {}

// UnsafePlayingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayingServer will
// result in compilation errors.
type UnsafePlayingServer interface {
	mustEmbedUnimplementedPlayingServer()
}

func RegisterPlayingServer(s grpc.ServiceRegistrar, srv PlayingServer) {
	s.RegisterService(&Playing_ServiceDesc, srv)
}

func _Playing_ProcessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayingServer).ProcessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Playing_ProcessRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayingServer).ProcessRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playing_ProcessNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayingServer).ProcessNotification(m, &playingProcessNotificationServer{stream})
}

type Playing_ProcessNotificationServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type playingProcessNotificationServer struct {
	grpc.ServerStream
}

func (x *playingProcessNotificationServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

// Playing_ServiceDesc is the grpc.ServiceDesc for Playing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Playing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Voxel.Playing",
	HandlerType: (*PlayingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessRequest",
			Handler:    _Playing_ProcessRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessNotification",
			Handler:       _Playing_ProcessNotification_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "combined_proto.proto",
}
