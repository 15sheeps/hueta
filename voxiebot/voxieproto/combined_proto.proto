syntax = "proto3";

package Voxel;

option go_package = "./main";

message StartGameNotification {
    
}

message InitNotification {
    string User_Id = 1;
    string Opponent_User_Id = 2;
    int32 Team_Id = 3;
    string MapName = 4;
    int32 RandomNumberClue = 5;
}

message InitMultiplayerVoxieTeam {
    string User_Id = 1;
    int32 Team_Id = 2;
    repeated Character Characters = 3;
}

message CursorPositionNotification {
    string User_Id = 1;
    Position Position = 2;
}

message PlacedCharacterNotification {
    string User_Id = 1;
    int32 CharacterIndex = 2;
    Position Position = 3;
}

message RemoveCharacterNotification {
    string User_Id = 1;
    int32 CharacterIndex = 2;
    Position Position = 3;
}

message ReadyToPlayNotification {
    string User_Id = 1;
    bool Ready = 2;
}

message LoadingProgresstNotification {
    string User_Id = 1;
    float Loading_Progress = 2;
}

message BattleStartedNotification {
    
}

message MoveCharacterNotification {
    string User_Id = 1;
    int32 CharacterIndex = 2;
    Position TargetPosition = 3;
}

message AttackCharacterNotification {
    string User_Id = 1;
    int32 CharacterIndex = 2;
    Position TargetPosition = 3;
    int32 DamageDone = 4;
    float HitChance = 5;
    bool HitOverride = 6;
    bool SpellProcOverride = 7;
    bool WeaponProcOverride = 8;
}

message SkillCharacterNotification {
    string User_Id = 1;
    int32 CharacterIndex = 2;
    Position TargetPosition = 3;
    string Skill_Used = 4;
    int32 DamageDone = 5;
    float HitChance = 6;
    bool HitOverride = 7;
    bool SpellProcOverride = 8;
    bool WeaponProcOverride = 9;
}

message ChargeSkillCharacterNotification {
    string User_Id = 1;
    int32 CharacterIndex = 2;
    Position TargetPosition = 3;
    string Skill_Used = 4;
    int32 TurnScore = 5;
    bool FollowCharacter = 6;
}

message ChargeSkillCompletedCharacterNotification {
    string User_Id = 1;
    int32 CharacterIndex = 2;
    string Skill_Used = 4;
}

message EquipCharacterNotification {
    string User_Id = 1;
    int32 CharacterIndex = 2;
    int32 Equip_Slot_Id = 3;
    string Equip_Item = 4;
}

message DefendCharacterNotification {
    string User_Id = 1;
    int32 CharacterIndex = 2;
    Position TargetPosition = 3;
}

message SetDirectionCharacterNotification {
    string User_Id = 1;
    int32 CharacterIndex = 2;
    FacingDirection TargetDirection = 3;
}

message EndTurnCharacterNotification {
    string User_Id = 1;
    int32 CharacterIndex = 2;
    bool ReduceTimer = 3;
}

message OpponentLeftGameNotification {
    
}

message EndMatchGameNotification {
    string User_Id = 1;
    float Voxel_reward = 2;
    repeated ItemReward Item_Rewards = 3;
    float Voxel_reward_split = 4;
    bool nft_reward_split = 5;
}

message AfterRejoinNotification {
    
}

message Notification {
    oneof data {
        StartGameNotification Start_Game = 100;
        InitNotification Init = 101;
        InitMultiplayerVoxieTeam MultiPlayer_Team = 102;
        LoadingProgresstNotification Loading_Progress = 103;
        CursorPositionNotification Cursor_Position = 110;
        PlacedCharacterNotification Placed_Character = 120;
        RemoveCharacterNotification Remove_Character = 121;
        ReadyToPlayNotification Ready_To_Play = 122;
        BattleStartedNotification Battle_Started = 123;
        MoveCharacterNotification Move_Character = 130;
        SetDirectionCharacterNotification SetDirection_Character = 131;
        EndTurnCharacterNotification EndTurn_Character = 132;
        AttackCharacterNotification Attack_Character = 133;
        EquipCharacterNotification Equip_Character = 134;
        DefendCharacterNotification Defend_Character = 135;
        SkillCharacterNotification Skill_Character = 136;
        ChargeSkillCharacterNotification Charge_Skill_Character = 137;
        ChargeSkillCompletedCharacterNotification Charge_Skill_Completed_Character = 138;
        OpponentLeftGameNotification Opponent_Left_Game = 160;
        EndMatchGameNotification End_Match = 170;
        AfterRejoinNotification After_Rejoin = 180;
    }
}

message MoveRequest {
    Position Target_Position = 1;
}

message SetDirectionRequest {
    FacingDirection Direction = 1;
}

message EndTurnRequest {
    bool ReduceTimer = 1;
}

message AttackRequest {
    Position Target_Position = 1;
    int32 DamageDone = 2;
    float HitChance = 3;
    bool HitOverride = 4;
    bool SpellProcOverride = 5;
    bool WeaponProcOverride = 6;
}

message UseClassSkillRequest {
    Position Target_Position = 1;
    string Skill_Used = 2;
    int32 DamageDone = 3;
    float HitChance = 4;
    bool HitOverride = 5;
    bool SpellProcOverride = 6;
    bool WeaponProcOverride = 7;
}

message ChargeSkillRequest {
    Position Target_Position = 1;
    string Skill_Used = 2;
    int32 TurnScore = 3;
    bool FollowCharacter = 4;
}

message ChargeSkillCompletdRequest {
    string Skill_Used = 2;
}

message SpecialSkillRequest {
    int32 Special_Skill_Id = 1;
    Position Target_Position = 2;
    string Skill_Used = 3;
}

message DefendRequest {
    Position Target_Position = 2;
}

message EquipRequest {
    int32 Equip_Slot_Id = 1;
    string Equip_Item = 2;
}

message ActionRequest {
    oneof Data {
        AttackRequest Attack = 10;
        UseClassSkillRequest Use_Class_Skill = 11;
        SpecialSkillRequest Special_Skill = 12;
        DefendRequest Defend = 13;
        ChargeSkillRequest ChargeSkill = 14;
        ChargeSkillCompletdRequest ChargeSkillCompleted = 15;
    }
}

message MakeTurnRequest {
    int32 CharacterIndex = 1;
    
    oneof Data {
        MoveRequest Move = 10;
        ActionRequest Action = 11;
        EquipRequest Equip = 12;
        SetDirectionRequest SetDirection = 13;
        EndTurnRequest EndTurn = 14;
    }
}

message JoinGameRequest {
    string Client_Access_Token = 1;
    string Custom_Attribute = 2;
}

message RejoinGameRequest {
    string Custom_Attribute = 1;
}

message MoveCursorRequest {
    Position position = 1;
}

message PlaceCharacterRequest {
    int32 CharacterIndex = 1;
    Position Position = 2;
}

message RemoveCharacterRequest {
    int32 CharacterIndex = 1;
    Position Position = 2;
}

message ReadyToPlayRequest {
    bool Ready = 1;
}

message LoadingProgressRequest {
    float Loading_Progress = 1;
}

message LoadingCompleteRequest {
    
}

message ClientPingRequest {
    
}

message WinRequest {
    int32 Team_Id = 1;
    int32 RandomNumberAnswer = 2;
    string RandomStringAnswer = 3;
}

message Request {
    uint32 Request_Id = 1;
    string User_Id = 2;
    
    oneof Data {
        JoinGameRequest Join_Game = 80;
        MoveCursorRequest Move_Cursor = 81;
        RejoinGameRequest Rejoin_Game = 82;
        PlaceCharacterRequest Place_Characters = 101;
        RemoveCharacterRequest Remove_Character = 102;
        ReadyToPlayRequest Ready_To_Play = 103;
        MakeTurnRequest Make_Turn = 104;
        ClientPingRequest Client_Ping = 105;
        WinRequest Win = 106;
        LoadingProgressRequest LoadingProgress = 107;
        LoadingCompleteRequest LoadingComplete = 108;
    }
}

message NotificationSubscribeRequest {
    string User_Id = 1;
}

message MoveResponse {
    
}

message AttackResponse {
    
}

message UseClassSkillResponse {
    
}

message ChargeSkillResponse {
    
}

message ChargeSkillCompleteResponse {
    
}

message SpecialSkillResponse {
    
}

message DefendResponse {
    
}

message EquipResponse {
    
}

message SetDirectionResponse {
    
}

message EndTurnResponse {
    
}

message ActionResponse {
    oneof Data {
        AttackResponse Attack = 10;
        UseClassSkillResponse Use_Class_Skill = 11;
        SpecialSkillResponse Special_Skill = 12;
        DefendResponse Defend = 13;
        ChargeSkillResponse ChargeSkill = 14;
        ChargeSkillCompleteResponse ChargeSkillComplete = 15;
    }
}

message MakeTurnResponse {
    oneof Data {
        MoveResponse Move = 10;
        ActionResponse Action = 11;
        EquipResponse Equip = 12;
        SetDirectionResponse SetDirection = 13;
        EndTurnResponse EndTurn = 14;
    }
}

message JoinGameResponse {
    ReturnCode Return_Code = 1;
    enum ReturnCode {
        SUCCESS = 0;
        ERROR_CLIENT_ACCESS_TOKEN_NOT_PROVIDED = 1;
        ERROR_WRONG_CUSTOM_ATTRIBUTE = 2;
        ERROR_THIS_USER_ALREADY_JOINED = 3;
    }
}

message RejoinGameResponse {
    ReturnCode Return_Code = 1;
    enum ReturnCode {
        SUCCESS = 0;
        ERROR_WRONG_CUSTOM_ATTRIBUTE = 1;
        ERROR_USER_NOT_FOUND = 2;
    }
}

message MoveCursorResponse {
    
}

message PlaceCharacterResponse {
    
}

message RemoveCharacterResponse {
    
}

message ReadyToPlayResponse {
    
}

message LoadingProgressResponse {
    
}

message LoadingCompleteResponse {
    
}

message ClientPingResponse {
    
}

message WinResponse {
    
}

message Response {
    uint32 Request_Id = 1;
    bool Result = 2;
    
    oneof Data {
        JoinGameResponse Join_Game = 80;
        MoveCursorResponse Move_Cursor = 81;
        RejoinGameResponse Rejoin_Game = 82;
        PlaceCharacterResponse Place_Characters = 101;
        RemoveCharacterResponse Remove_Character = 102;
        ReadyToPlayResponse Ready_To_Play = 103;
        MakeTurnResponse Make_Turn = 104;
        ClientPingResponse Client_Ping = 105;
        WinResponse Win = 106;
        LoadingProgressResponse Loading_Progress = 107;
        LoadingCompleteResponse Loading_Complete = 108;
    }
}

service Playing {
    rpc ProcessRequest(Request) returns (Response);
    rpc ProcessNotification(NotificationSubscribeRequest) returns (stream Notification);
}

message Position {
    int32 X = 1;
    int32 Y = 2;
}

message FacingDirection {
    float X = 1;
    float Y = 2;
    float Z = 3;
}

message ItemReward {
    string Item_Id = 1;
}

message Character {
    int32 VoxieIndex = 1;
    int32 VoxieClass = 2;
    int32 Level_Stat = 3;
    string VoxieName = 4;
    string Equip_Left_Weapon = 5;
    string Equip_Right_Weapon = 6;
    string Equip_Head = 7;
    string Equip_Body = 8;
    string Equip_Hands = 9;
    string Equip_Feet = 10;
    string Equip_Accessory = 11;
    string Equip_Pet = 12;
    int32 Speed_Score = 13;
    bool Is_Recruit = 14;
    int32 Strength = 15;
    int32 Dexterity = 16;
    int32 Intelligence = 17;
    int32 Luck = 18;
    int32 Armor = 19;
    int32 Movement = 20;
    bool Is_Ghost = 21;
}
